---
description: Component patterns for rapid MVP development
globs: ["packages/ui/**/*", "**/components/**/*", "**/*.tsx"]
alwaysApply: false
---

# Component Rules

## Component Structure
- Keep components simple and focused
- Export from packages/ui for reusability
- Use TypeScript interfaces for props

```typescript
// ✅ Good - simple focused component
interface ButtonProps {
  title: string
  onPress: () => void
  variant?: 'primary' | 'secondary'
}

export function AppButton({ title, onPress, variant = 'primary' }: ButtonProps) {
  return (
    <Button theme={variant} onPress={onPress}>
      {title}
    </Button>
  )
}
```

## Tamagui Patterns
- Use Tamagui components as building blocks
- Leverage theme tokens for consistency
- Compose complex UIs from simple components

```typescript
// ✅ Good - Tamagui composition
export function UserCard({ user }: { user: User }) {
  return (
    <YStack space="$2" padding="$4" backgroundColor="$background">
      <XStack space="$3" alignItems="center">
        <Avatar src={user.avatar} size="$4" />
        <YStack>
          <Text fontSize="$4" fontWeight="bold">{user.name}</Text>
          <Text fontSize="$2" color="$gray10">{user.email}</Text>
        </YStack>
      </XStack>
    </YStack>
  )
}

// ❌ Bad - inline styling
<div style={{ padding: '16px', backgroundColor: '#fff' }}>
```

## Form Components
- Use controlled components for forms
- Implement validation feedback
- Keep form state simple for MVP

```typescript
// ✅ Good - controlled form input
interface TextFieldProps {
  label: string
  value: string
  onChangeText: (text: string) => void
  error?: string
}

export function TextField({ label, value, onChangeText, error }: TextFieldProps) {
  return (
    <YStack space="$1">
      <Label>{label}</Label>
      <Input 
        value={value} 
        onChangeText={onChangeText}
        borderColor={error ? '$red8' : '$gray6'}
      />
      {error && <Text color="$red10" fontSize="$2">{error}</Text>}
    </YStack>
  )
}
```

## Loading States
- Show loading UI for all async operations
- Use skeleton screens for better UX
- Keep loading components simple

```typescript
// ✅ Good - loading states
export function PostList() {
  const { data: posts, isLoading } = useQuery(['posts'], fetchPosts)
  
  if (isLoading) return <PostListSkeleton />
  
  return (
    <YStack space="$3">
      {posts?.map(post => <PostCard key={post.id} post={post} />)}
    </YStack>
  )
}

// ✅ Good - skeleton component
export function PostListSkeleton() {
  return (
    <YStack space="$3">
      {Array(3).fill(0).map((_, i) => (
        <YStack key={i} space="$2" padding="$3">
          <Rectangle height={20} backgroundColor="$gray4" borderRadius="$2" />
          <Rectangle height={40} backgroundColor="$gray4" borderRadius="$2" />
        </YStack>
      ))}
    </YStack>
  )
}
```

## Accessibility (MVP Essentials)
- Add basic accessibility props
- Use semantic HTML elements on web
- Test with screen readers

```typescript
// ✅ Good - accessible button
<Button 
  accessibilityRole="button"
  accessibilityLabel="Save post"
  onPress={handleSave}
>
  Save
</Button>

// ✅ Good - accessible form
<YStack accessibilityRole="form">
  <TextField 
    label="Email"
    value={email}
    onChangeText={setEmail}
    accessibilityHint="Enter your email address"
  />
</YStack>
```

## Error Boundaries
- Wrap components in error boundaries
- Show fallback UI for component errors
- Log errors for debugging

```typescript
// ✅ Good - error boundary usage
export function UserProfile({ userId }: { userId: string }) {
  return (
    <ErrorBoundary fallback={<Text>Failed to load profile</Text>}>
      <UserProfileContent userId={userId} />
    </ErrorBoundary>
  )
}
```

## Component Organization
- One component per file
- Co-locate related components
- Use index files for clean imports

```typescript
// ✅ Good - clean exports
// components/user/index.ts
export { UserCard } from './UserCard'
export { UserList } from './UserList'
export { UserProfile } from './UserProfile'

// Usage
import { UserCard, UserList } from '@ui/components/user'
```