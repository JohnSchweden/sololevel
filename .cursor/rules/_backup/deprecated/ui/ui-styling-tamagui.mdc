---
description: "DEPRECATED - Use ui/cross-platform-styling.mdc instead"
globs: ["packages/ui/**/*", "**/theme/**/*", "**/styles/**/*"]
alwaysApply: false
deprecated: true
---

# ⚠️ DEPRECATED - UI Styling & Theming

**This rule has been consolidated into `ui/cross-platform-styling.mdc` for better organization and reduced duplication.**

**Please use the new consolidated rule instead: `ui/cross-platform-styling.mdc`**

---

# UI Styling & Theming

## Theming System
- Define themes in packages/ui/theme
- Use semantic token names
- Create light/dark theme variants
- Keep theme tokens consistent across platforms

```typescript
// ✅ Good - semantic theme tokens
export const theme = createTheme({
  color: {
    background: '#ffffff',
    backgroundSecondary: '#f8f9fa',
    primary: '#007bff',
    primaryHover: '#0056b3',
    text: '#212529',
    textSecondary: '#6c757d',
    error: '#dc3545',
    success: '#28a745'
  },
  space: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32
  }
})
```

## Token Usage
- ALWAYS use theme tokens over hardcoded values
- Use $ prefix for token references
- Leverage Tamagui's responsive tokens
- Create custom tokens for brand-specific values

```typescript
// ✅ Good - using theme tokens
<YStack 
  backgroundColor="$background" 
  padding="$md"
  space="$sm"
  borderRadius="$4"
>
  <Text color="$text" fontSize="$6">Title</Text>
  <Text color="$textSecondary" fontSize="$3">Subtitle</Text>
</YStack>

// ❌ Bad - hardcoded values
<YStack backgroundColor="#fff" padding={16}>
```

## Responsive Design
- Use Tamagui's breakpoint system
- Mobile-first approach
- Test on multiple screen sizes
- Use responsive tokens and media queries

```typescript
// ✅ Good - responsive styling
<XStack
  flexDirection="$sm-down" ? "column" : "row"
  space="$md"
  $sm={{ space: "$sm", flexDirection: "column" }}
  $md={{ space: "$lg", flexDirection: "row" }}
>
  <Text fontSize="$6" $sm={{ fontSize: "$4" }}>Responsive Text</Text>
</XStack>
```

## Animation System
- Use Tamagui's built-in animations
- Create consistent animation tokens
- Keep animations subtle for MVP
- Use enterStyle/exitStyle for transitions

```typescript
// ✅ Good - Tamagui animations
<Button
  animation="bouncy"
  hoverStyle={{
    scale: 1.05,
    backgroundColor: "$primaryHover"
  }}
  pressStyle={{
    scale: 0.98
  }}
>
  Animated Button
</Button>

// ✅ Good - enter/exit animations
<YStack
  animation="quick"
  enterStyle={{ opacity: 0, y: -10 }}
  exitStyle={{ opacity: 0, y: 10 }}
>
  Content
</YStack>
```

## Custom Styled Components
- Create styled components for repeated patterns
- Use Tamagui's styled() function
- Compose from base Tamagui components
- Export from packages/ui for reuse

```typescript
// ✅ Good - custom styled component
export const Card = styled(YStack, {
  backgroundColor: "$background",
  borderRadius: "$4",
  padding: "$md",
  ...$shadow.medium,
  $web: {
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.15)"
  },

  variants: {
    variant: {
      elevated: {
        ...$shadow.large,
        $web: {
          boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)"
        }
      },
      flat: {
        shadowOpacity: 0,
        shadowRadius: 0,
        elevation: 0,
        borderWidth: 1,
        borderColor: "$borderColor",
        $web: {
          boxShadow: "none"
        }
      }
    }
  }
})

// Usage
<Card variant="elevated">Content</Card>
```

## Platform-Specific Styling
- Use .native.tsx files ONLY when necessary
- Prefer Tamagui's platform detection
- Keep platform differences minimal
- Use Platform.select for small differences

```typescript
// ✅ Good - platform-aware styling
import { Platform } from 'react-native'

const PlatformCard = styled(YStack, {
  ...Platform.select({
    web: {
      cursor: 'pointer',
      userSelect: 'none'
    },
    native: {
      activeOpacity: 0.8
    }
  })
})
```

## Shadow Handling (Cross-Platform)
- NEVER use React Native shadow props directly on web
- Use Tamagui's elevation system or platform-specific styling
- PREFER shadow tokens over hardcoded shadow values
- Handle shadowColor, shadowOffset, shadowOpacity, shadowRadius properly
- Avoid boxShadow DOM prop warnings

### Available Shadow Tokens
- `$shadow.small` - Light shadow (elevation: 1)
- `$shadow.medium` - Standard shadow (elevation: 2) 
- `$shadow.large` - Prominent shadow (elevation: 4)
- `$shadow.xlarge` - Maximum shadow (elevation: 6)

```typescript
// ✅ Good - Tamagui elevation system
<View elevation={2} />

// ✅ Good - platform-specific shadow styling with tokens
<View 
  {...$shadow.medium}
  $web={{
    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.15)'
  }}
/>

// ✅ Good - using shadow tokens
<View 
  {...$shadow.medium}
  $web={{
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.15)"
  }}
/>

// ✅ Good - platform-specific components with tokens
// .web.tsx
<View 
  style={{
    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.15)'
  }}
/>

// .native.tsx
<View 
  {...$shadow.medium}
/>

// ❌ Bad - causes React DOM warnings
<View 
  boxShadow="0 2px 3.84px rgba(0, 0, 0, 0.25)"
  shadowColor="black"
  shadowOffset={{ width: 0, height: 2 }}
  shadowOpacity={0.25}
  shadowRadius={3.84}
/>
```

## Typography System
- Define consistent text styles
- Use font tokens from theme
- Create semantic text components
- Ensure proper contrast ratios

```typescript
// ✅ Good - typography components
export const Heading = styled(Text, {
  fontSize: "$8",
  fontWeight: "bold",
  color: "$text",
  lineHeight: "$1",

  variants: {
    level: {
      1: { fontSize: "$10" },
      2: { fontSize: "$8" },
      3: { fontSize: "$6" }
    }
  }
})

export const Body = styled(Text, {
  fontSize: "$4",
  color: "$text",
  lineHeight: "$2"
})

export const Caption = styled(Text, {
  fontSize: "$2",
  color: "$textSecondary",
  lineHeight: "$1"
})
```

## Layout Patterns
- Use consistent spacing scale
- Create layout components for common patterns
- Leverage Tamagui's flex utilities
- Keep layouts simple and flexible

```typescript
// ✅ Good - layout components
export const Container = styled(YStack, {
  maxWidth: 1200,
  marginHorizontal: "auto",
  paddingHorizontal: "$md",
  width: "100%"
})

export const Section = styled(YStack, {
  paddingVertical: "$xl",
  space: "$lg"
})

export const Grid = styled(XStack, {
  flexWrap: "wrap",
  margin: "-$sm",
  
  "& > *": {
    padding: "$sm",
    minWidth: "50%",
    
    "$md-up": {
      minWidth: "33.333%"
    }
  }
})
```

## Color System
- Use HSL for better color manipulation
- Create color scales for consistency
- Implement proper dark mode support
- Test color contrast for accessibility

```typescript
// ✅ Good - color scales
export const colors = {
  blue: {
    1: 'hsl(210, 100%, 98%)',
    2: 'hsl(210, 100%, 95%)',
    // ... scale continues
    11: 'hsl(210, 100%, 15%)',
    12: 'hsl(210, 100%, 8%)'
  }
}
```