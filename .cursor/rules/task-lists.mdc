---
description: Task list management for cross-platform development
globs: ["docs/TASKS.md", "docs/tasks/**/*.md"]
alwaysApply: false
---

# Task List Management

Enhanced guidelines for cross-platform development task tracking.

## General Principles
- **Atomic tasks only**: Split compound actions into individual checkboxes
- **Single source of truth**: Each task appears in exactly one section
- **Immediate transitions**: Move tasks between sections when status changes
- **Platform awareness**: Tag platform-specific tasks with [Web], [Native], or [Both]
- **Zero ambiguity**: Parent items are headings, not checkboxes

## Structure Requirements

### Completed Tasks
- Only fully verified and tested items
- Include platform tags for reference
- Keep for sprint/milestone retrospectives

### In Progress Tasks  
- **Maximum 2-3 items** for focus
- Must be actively worked on (not just planned)
- Include current blocker/next step if stalled

### Future Tasks
- **Zero checked items** (move completed ones immediately)
- Prioritized order (most important first)
- Group related platform work together
- Include effort estimates: [S/M/L]

### Testing Pipeline
- Separate section for test-dependent tasks
- Link to specific test files or suites
- Track both unit and E2E test coverage

## Cross-Platform Considerations
- Tag platform scope: [Web], [Native], [Both]
- Dependencies between platforms clearly marked
- Shared package changes affect both platforms
- Database changes impact all clients

## Development Workflow Integration
**CRITICAL**: Task list updates are PART OF task completion, not separate:

### Task Completion Sequence
1. [ ] Complete task code/work
2. [ ] **Immediately update task list file**
3. [ ] Move completed task to proper section
4. [ ] Update In Progress with next task
5. [ ] Remove from Future Tasks section
6. [ ] **Never batch task list updates**

### Prevention Checklist
**Before ending work session**:
- [ ] All completed tasks moved to Completed Tasks section?
- [ ] Future Tasks has zero checked items?
- [ ] In Progress has max 2-3 items?
- [ ] Each task appears in exactly one section?

**During work session**:
- [ ] Update task list after each individual completion
- [ ] Move completed tasks immediately (no batching)
- [ ] Keep Future Tasks section clean

## Enforcement Protocol
**If Rule Violation Occurs**:
1. **STOP current work immediately**
2. **Fix task list structure** (move completed tasks to proper sections)
3. **Document the violation** in task list comments
4. **Create memory** of violation with prevention strategy
5. **Continue work only after compliance restored**

**Memory Requirement**: Each violation must be documented with:
- What was violated
- How it was fixed
- Prevention strategy for future

## Enhanced Template

```markdown
# [Feature/Component] Tasks

## Completed Tasks
- [x] Setup Tamagui component structure [Both]
- [x] Implement core logic with TypeScript [Both]
- [x] Add unit tests with Vitest [Both]

## In Progress Tasks
- [ ] Implement native-specific gestures [Native]
  - Next: Add pan gesture handlers
  - Blocker: Need to test on iOS device

## Future Tasks
- [ ] Add web-specific keyboard shortcuts [Web] [S]
- [ ] Implement Supabase realtime sync [Both] [M]
- [ ] Add E2E tests for critical flows [Both] [L]
- [ ] Performance optimization with React.memo [Both] [S]

## Testing Pipeline
- [ ] Unit tests passing (packages/ui/components/Feature.test.tsx)
- [ ] Component tests with RTL (packages/app/features/Feature.test.tsx)
- [ ] E2E Native (e2e/Feature.test.ts)
- [ ] E2E Web (tests/Feature.spec.ts)

## Relevant Files
- `packages/ui/components/Feature.tsx` — Main component [x]
- `packages/app/features/Feature/FeatureScreen.tsx` — Screen implementation [ ]
- `packages/api/hooks/useFeature.ts` — Data layer [ ]
- `supabase/migrations/001_feature_tables.sql` — Database schema [x]

## Test Development Guidelines
When creating tests for tasks:
- **Target**: 1:2 test-to-code ratio
- **Focus**: User behavior, not implementation
- **Scope**: Critical flows only
- **Mocking**: External dependencies only
- **Review**: Ask "Would user notice if this broke?"

---

## Quick Update Template
**After completing a task, immediately run this sequence:**

1. **Move to Completed Tasks:**
   ```markdown
   ## Completed Tasks
   - [x] [Completed task description] [Platform] [Effort]
   ```

2. **Update In Progress:**
   ```markdown
   ## In Progress Tasks
   - [ ] [Next task] [Platform] [Effort]
     - Next: [Specific next step]
     - Blocker: [Any blockers]
   ```

3. **Clean Future Tasks:**
   - Remove any completed items
   - Keep zero checked items
   - Prioritize remaining tasks

**REMINDER**: Task list updates are PART OF task completion!