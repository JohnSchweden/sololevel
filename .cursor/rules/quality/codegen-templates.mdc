---
description: Standard, copy/paste-safe scaffolds for common patterns in this repo (Expo/Next, Tamagui, Supabase, Zustand, TanStack Query, Expo Router). TypeScript-only.
globs: ["**/*"]
alwaysApply: false
---

# Code Generation Templates

### Usage
- Prefer these templates when scaffolding new modules/screens/components/hooks.
- Keep imports aligned with path aliases (`@ui/`, `@app/`, `@api-client/`, etc.).
- Respect the monorepo structure: apps/* vs packages/*.

## Templates

### Zustand store
```ts
// packages/app/stores/{{name}}.ts
import { create } from 'zustand';

interface {{PascalName}}State {
  isLoading: boolean;
  error: string | null;
  data: unknown | null;
  setLoading: (v: boolean) => void;
  setError: (e: string | null) => void;
  setData: (d: unknown | null) => void;
}

export const use{{PascalName}}Store = create<{{PascalName}}State>((set) => ({
  isLoading: false,
  error: null,
  data: null,
  setLoading: (v) => set({ isLoading: v }),
  setError: (e) => set({ error: e }),
  setData: (d) => set({ data: d }),
}));
```

### TanStack Query hook (query)
```ts
// packages/api-client/src/hooks/use{{name}}.ts
import { useQuery } from '@tanstack/react-query';
import { z } from 'zod';

const {{camel}}Schema = z.object({ /* â€¦ */ });
type {{Pascal}} = z.infer<typeof {{camel}}Schema>;

async function fetch{{Pascal}}(id: string): Promise<{{Pascal}}> {
  const res = await fetch(`/api/{{kebab}}/${id}`);
  if (!res.ok) throw new Error(`Failed to fetch {{kebab}}`);
  const json = await res.json();
  return {{camel}}Schema.parse(json);
}

export const use{{Pascal}} = (id: string) => {
  return useQuery({
    queryKey: ['{{kebab}}', id],
    queryFn: () => fetch{{Pascal}}(id),
    staleTime: 60_000,
  });
};
```

### TanStack Mutation
```ts
// packages/api-client/src/hooks/use{{name}}Mutation.ts
import { useMutation, useQueryClient } from '@tanstack/react-query';

export const use{{Pascal}}Mutation = () => {
  const qc = useQueryClient();
  return useMutation({
    mutationFn: async (payload: unknown) => {
      const res = await fetch(`/api/{{kebab}}`, {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error('Mutation failed');
      return res.json();
    },
    onSuccess: (_, vars) => {
      qc.invalidateQueries({ queryKey: ['{{kebab}}'] });
    },
  });
};
```

### Cross-platform screen with dependency injection
```tsx
// packages/app/features/{{Feature}}/screen.tsx
import { YStack, H1, Paragraph } from '@ui/index';

export interface {{Feature}}ScreenProps {
  id?: string;
  onNavigate?: () => void;
  linkComponent?: React.ReactNode;
}

export function {{Feature}}Screen({ 
  id, 
  onNavigate, 
  linkComponent 
}: {{Feature}}ScreenProps) {
  return (
    <YStack padding="$4">
      <H1 accessibilityRole="header">{{Feature}} {id}</H1>
      <Paragraph>Content</Paragraph>
      {linkComponent || (
        <Button onPress={onNavigate}>Navigate</Button>
      )}
    </YStack>
  );
}
```

### Expo Router app route
```tsx
// apps/expo/app/{{feature}}/[id].tsx
import { {{Feature}}Screen } from 'app/features/{{feature}}/screen';
import { Stack, useRouter, useLocalSearchParams, Link } from 'expo-router';
import { Button } from '@ui/index';

export default function Screen() {
  const { id } = useLocalSearchParams();
  const router = useRouter();
  
  return (
    <>
      <Stack.Screen options={{ title: '{{Feature}}' }} />
      <{{Feature}}Screen 
        id={id as string}
        onNavigate={() => router.back()}
        linkComponent={
          <Link href="/other" asChild>
            <Button>Go to Other</Button>
          </Link>
        }
      />
    </>
  );
}
```

### Shared UI component (Tamagui)
```tsx
// packages/ui/src/components/{{PascalName}}.tsx
import { styled, Button } from 'tamagui';

export interface {{PascalName}}Props {
  label: string;
  onPress?: () => void;
  accessibilityLabel?: string;
}

export function {{PascalName}}({ label, onPress, accessibilityLabel }: {{PascalName}}Props) {
  return (
    <Button
      onPress={onPress}
      accessibilityRole="button"
      accessibilityLabel={accessibilityLabel ?? label}
    >
      {label}
    </Button>
  );
}
```

### Supabase Edge Function (Deno.serve)
```ts
// supabase/functions/{{kebab}}/index.ts
// deno-lint-ignore-file
import 'jsr:@supabase/functions-js/edge-runtime.d.ts';

Deno.serve(async (req) => {
  try {
    const input = await req.json().catch(() => ({}));
    // TODO: implement
    return new Response(JSON.stringify({ ok: true, input }), {
      headers: { 'content-type': 'application/json' },
      status: 200,
    });
  } catch (e) {
    return new Response(JSON.stringify({ ok: false, error: String(e) }), {
      headers: { 'content-type': 'application/json' },
      status: 500,
    });
  }
});
```

### Typed API client wrapper (fetch + Zod)
```ts
// packages/api-client/src/{{domain}}.ts
import { z } from 'zod';

export interface Http {
  get<T>(url: string): Promise<T>;
  post<T>(url: string, body: unknown): Promise<T>;
}

export function createHttp(base = ''): Http {
  return {
    async get<T>(url) {
      const r = await fetch(base + url);
      if (!r.ok) throw new Error(`GET ${url} ${r.status}`);
      return (await r.json()) as T;
    },
    async post<T>(url, body) {
      const r = await fetch(base + url, {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify(body),
      });
      if (!r.ok) throw new Error(`POST ${url} ${r.status}`);
      return (await r.json()) as T;
    },
  };
}
```

### Vitest test
```ts
// packages/{{pkg}}/src/{{name}}.test.ts
import { describe, it, expect } from 'vitest';

describe('{{name}}', () => {
  it('works', () => {
    expect(1 + 1).toBe(2);
  });
});
```

