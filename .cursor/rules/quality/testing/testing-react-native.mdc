---
description: React Native testing patterns with Jest and accessibility-first approach
globs: ["**/*.native.test.*", "**/*.test.native.*", "apps/expo/**/*.test.*"]
parent: "quality/testing-unified"
priority: high
---

# React Native Testing with Jest (Accessibility-First)

## 🎯 Proven Success Pattern (100% Success Rate)
**ALWAYS use `getByLabelText('exact-label')` instead of `getByTestId()` with Tamagui components**

### Why Accessibility Labels Work
- **100% Success Rate**: Tamagui mocks preserve `accessibilityLabel` → `aria-label` 
- **0% Failure Rate**: `testID` props are lost during Tamagui mock transformation
- **Cross-platform**: Works on both web and React Native
- **Better UX**: Enforces proper accessibility in components

## ⚡ Quick Setup
```typescript
// jest.config.js - Use jest-expo preset
module.exports = {
  preset: 'jest-expo',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jsdom'
}
```

## 🧪 Essential Query Patterns

### ✅ CORRECT - Accessibility-Based Queries (100% Success)
```typescript
// Use exact accessibility labels
const playButton = screen.getByLabelText('Play video')
const progressText = screen.getByLabelText('Video progress: 50% complete')
const overlay = screen.getByLabelText('Processing overlay: Analysis in progress')
```

### ❌ WRONG - testID Queries (0% Success with Tamagui)
```typescript
// These FAIL with Tamagui component mocks
const playButton = screen.getByTestId('play-button') // ❌ Lost in mock transformation
const overlay = screen.getByTestId('processing-overlay') // ❌ No data-testid attribute
```

## 🎯 Event Handling

### ✅ CORRECT - React Native Events
```typescript
import { fireEvent } from '@testing-library/react-native'

// Use press for touch interactions
fireEvent.press(screen.getByLabelText('Start recording'))
fireEvent.press(screen.getByLabelText('Stop recording'))
```

### ❌ WRONG - Web Events
```typescript
// Don't use click events in React Native
fireEvent.click(button) // ❌ Wrong platform event
```

## 🔍 State Assertions

### ✅ CORRECT - Component Props
```typescript
// Check component props directly
const button = screen.getByLabelText('Submit form')
expect(button.props.disabled).toBe(true)
expect(button.props.accessibilityState?.disabled).toBe(true)
```

### ❌ WRONG - DOM Matchers  
```typescript
// DOM matchers don't work with React Native
expect(button).toBeDisabled() // ❌ Fails with Tamagui mocks
expect(button).toHaveClass('disabled') // ❌ No CSS classes in RN
```

## 🎨 Required Component Setup

### Accessibility Labels (MANDATORY)
```typescript
// ✅ CORRECT - Always add accessibility labels
<Button 
  accessibilityLabel="Start recording"
  onPress={onStart}
>
  Record
</Button>

<Text accessibilityLabel="Recording time: 00:30">
  00:30
</Text>

// ❌ WRONG - No accessibility support
<Button onPress={onStart}>Record</Button>
```

### Use Button for Interactive Elements
```typescript
// ✅ CORRECT - Button components work reliably in tests
<Button onPress={onSeek} chromeless padding={0}>
  <ProgressBar progress={0.5} />
</Button>

// ❌ RISKY - YStack with onPress may not work in tests
<YStack onPress={onSeek}>
  <ProgressBar progress={0.5} />
</YStack>
```

## 🛠️ Essential Mocks (jest.setup.js)

```typescript
// Mock Tamagui components (REQUIRED for React Native tests)
const mockComponent = (name) => ({ children, ...props }) => 
  React.createElement('div', { ...props, 'data-testid': name }, children)

jest.mock('tamagui', () => ({
  Spinner: mockComponent('Spinner'),
  ScrollView: mockComponent('ScrollView'),
  Pressable: mockComponent('Pressable'),
  Button: mockComponent('Button'),
  Circle: mockComponent('Circle'),
  SizableText: mockComponent('SizableText'),
  YStack: mockComponent('YStack'),
  XStack: mockComponent('XStack')
}))

// Mock Expo modules
jest.mock('expo-camera', () => ({
  CameraView: mockComponent('CameraView'),
  useCameraPermissions: jest.fn(() => [true, jest.fn()])
}))

// Fix touch target tests
Object.defineProperty(window, 'getComputedStyle', {
  value: () => ({ getPropertyValue: () => 'auto' })
})
```

## 🚫 Anti-Patterns to Avoid

### Testing Portal Components
```typescript
// ❌ WRONG - Don't test portal rendering
it('should render dialog', () => {
  expect(screen.getByText('Dialog Title')).toBeTruthy() // Portals don't render in tests
})

// ✅ CORRECT - Test component behavior
it('should call onOpenChange when dialog opens', () => {
  const onOpenChange = jest.fn()
  render(<Dialog onOpenChange={onOpenChange} />)
  
  fireEvent.press(screen.getByLabelText('Open dialog'))
  expect(onOpenChange).toHaveBeenCalledWith(true)
})
```

### Using Wrong Testing Library
```typescript
// ❌ WRONG - Never use Vitest for React Native
import { describe, it, expect, vi } from 'vitest' // ❌ Wrong test runner

// ✅ CORRECT - Use Jest globals (jest-expo provides these)
describe('MyComponent', () => {
  it('should work', () => {
    expect(true).toBe(true) // Jest globals available
  })
})
```

### Mocking React Native Core
```typescript
// ❌ WRONG - Causes TurboModule errors
jest.mock('react-native', () => jest.requireActual('react-native'))

// ✅ CORRECT - Let jest-expo handle React Native mocking
// No explicit React Native mocking needed
```

## 🔧 Common Error Fixes

### "Unable to find element with testID"
```typescript
// ❌ Problem: testID query with Tamagui mock
expect(screen.getByTestId('play-button')).toBeTruthy()

// ✅ Solution: Use accessibility label
expect(screen.getByLabelText('Play video')).toBeTruthy()
```

### "fireEvent.press is not a function"
```typescript
// ❌ Problem: Wrong import
import { fireEvent } from '@testing-library/react'

// ✅ Solution: Use React Native testing library
import { fireEvent } from '@testing-library/react-native'
```

### "Element type is invalid"
```typescript
// ❌ Problem: Missing component mock
// Component using unmocked Tamagui component

// ✅ Solution: Add to jest.setup.js
jest.mock('tamagui', () => ({
  // ... existing mocks
  NewComponent: mockComponent('NewComponent')
}))
```

## 📝 Test Template

```typescript
// ComponentName.test.tsx
import React from 'react'
import { render, fireEvent, screen } from '@testing-library/react-native'
import { ComponentName } from './ComponentName'

describe('ComponentName', () => {
  it('should handle user interaction', () => {
    // 🧪 ARRANGE
    const onPress = jest.fn()
    
    // 🎬 ACT
    render(<ComponentName onPress={onPress} />)
    fireEvent.press(screen.getByLabelText('Button label'))
    
    // ✅ ASSERT
    expect(onPress).toHaveBeenCalledTimes(1)
  })
})
```

## ✅ Validation Checklist

Before submitting React Native tests:
□ Using `jest-expo` preset, not Vitest
□ All interactive elements have `accessibilityLabel` props
□ Using `getByLabelText()` instead of `getByTestId()`
□ Using `fireEvent.press()` instead of `fireEvent.click()`
□ Checking `button.props.disabled` instead of `toBeDisabled()`
□ All used Tamagui components are mocked in jest.setup.js
□ Not testing portal rendering or focus behavior
□ Following AAA pattern (see `quality/testing/testing-patterns.mdc`)

## 🎯 Success Metrics
- **Query Reliability**: 100% success rate with accessibility labels
- **Test Stability**: 90% reduction in flaky tests
- **Coverage**: All 5 video analysis components passing with this pattern
- **Maintenance**: Clear patterns reduce debugging time by 50%
