
# Modern Testing Strategy (Unified Coordinator)

## ðŸŽ¯ Core Philosophy
**Test user behavior, not implementation. Focus on what users would notice if it broke.**

### Test Runner Selection
- **React Native/Expo**: Jest with `jest-expo` preset â†’ See `quality/testing/testing-react-native.mdc`
- **Web/Node.js**: Vitest â†’ See `quality/testing/testing-web.mdc`
- **NEVER mix**: Use Vitest for React Native testing

### Critical Success Pattern (100% Success Rate)
**React Native**: Use accessibility-based queries â†’ See `quality/testing/testing-react-native.mdc`

## ðŸ“‹ Quick Reference

### Before Writing Tests
1. **READ** `quality/testing/testing-patterns.mdc` for AAA pattern and best practices
2. **FOLLOW** environment-specific patterns from sub-rules
3. **CONSULT** `docs/workflow/custom_modes/testing-workflow-enhanced.md` for React Native

### Test Efficiency Rules
- **Ratio**: 1:2 test-to-code maximum â†’ See `quality/testing/testing-patterns.mdc`
- **Focus**: User-visible behavior only â†’ See `quality/testing/testing-patterns.mdc`
- **Mock**: External dependencies only â†’ See `quality/testing/testing-setup.mdc`
- **Convert**: Complex failing tests to integration tests â†’ See `quality/testing/testing-troubleshooting.mdc`

## ðŸ”— Sub-Rule Navigation

### Core Patterns & Organization
**`quality/testing/testing-patterns.mdc`**
- AAA (Arrange-Act-Assert) pattern (mandatory)
- Test organization and naming conventions
- Data-driven testing patterns
- Test independence and isolation

### React Native Testing (Jest)
**`quality/testing/testing-react-native.mdc`**
- Accessibility-based queries (100% success rate)
- Tamagui component testing patterns
- Event handling with `fireEvent.press()`
- Common React Native anti-patterns to avoid

### Web Testing (Vitest)
**`quality/testing/testing-web.mdc`**
- Component testing with jsdom
- Business logic testing patterns
- Browser API mocking
- Web-specific best practices

### Environment Setup
**`quality/testing/testing-setup.mdc`**
- Jest configuration for React Native
- Vitest configuration for web
- Essential mocks and setup files
- Manual vs automatic mocking strategies

### Troubleshooting & Debugging
**`quality/testing/testing-troubleshooting.mdc`**
- Common error patterns and fixes
- Query strategy problems and solutions
- Mock configuration issues
- Performance and debugging guidelines

### Success Metrics & Validation
**`quality/testing/testing-metrics.mdc`**
- Proven success patterns and metrics
- Validation checklists
- Coverage requirements
- Review and maintenance guidelines

## ðŸš€ Quick Start Checklist
â–¡ Choose correct test runner (Jest for RN, Vitest for web)
â–¡ Follow AAA pattern with clear comments
â–¡ Use accessibility labels for React Native queries
â–¡ Mock external dependencies only
â–¡ Maintain 1:2 test-to-code ratio
â–¡ Test user behavior, not implementation

## ðŸŽ¯ Success Metrics Summary
â†’ See `quality/testing/testing-metrics.mdc` for comprehensive success metrics and validation

## ðŸ”„ Rule Updates
This rule coordinates focused sub-rules. Update specific patterns in their respective sub-rule files:
- Add new patterns to `testing-patterns.mdc`
- Update React Native issues in `testing-react-native.mdc` 
- Add troubleshooting to `testing-troubleshooting.mdc`
- Update metrics in `testing-metrics.mdc`

**Last Coordinated**: September 2025 - Accessibility-first patterns proven successful

â†’ See `quality/testing/testing-metrics.mdc` for performance and maintenance guidelines
