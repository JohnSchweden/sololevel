---
description: Unified testing strategy coordinator for Jest and Vitest environments
globs: ["**/*.test.*", "**/*.spec.*"]
alwaysApply: false
references: ["quality/testing/testing-patterns", "quality/testing/testing-react-native", "quality/testing/testing-web", "quality/testing/testing-setup", "quality/testing/testing-troubleshooting", "quality/testing/testing-metrics"]
---

# Modern Testing Strategy (Unified Coordinator)

## ðŸŽ¯ Core Philosophy
**Test user behavior, not implementation. Focus on what users would notice if it broke.**

### Package-Specific Test Runner Selection
- **packages/ui** (Shared UI Components): Jest with jsdom â†’ Web component testing â†’ See `quality/testing/testing-web.mdc`
- **packages/app** (Business Logic & Screens): Jest with jsdom â†’ React Native app testing â†’ See `quality/testing/testing-react-native.mdc`
- **packages/api** (Backend Integration): Vitest â†’ Node.js API testing â†’ See `quality/testing/testing-web.mdc`
- **apps/expo** (React Native App): Jest with jest-expo preset â†’ Full RN app testing â†’ See `quality/testing/testing-react-native.mdc`
- **apps/next** (Web App): Vitest â†’ Web app testing â†’ See `quality/testing/testing-web.mdc`
- **NEVER mix**: Don't use Vitest for React Native or Jest for pure Node.js testing

### Critical Success Patterns
- **packages/ui**: DOM-based queries with `data-testid` â†’ See `quality/testing/testing-web.mdc`
- **packages/app**: Accessibility-based queries with `getByLabelText()` â†’ See `quality/testing/testing-react-native.mdc`
- **packages/api**: Standard Node.js testing patterns â†’ See `quality/testing/testing-web.mdc`

## ðŸ“‹ Quick Reference

### Before Writing Tests
1. **IDENTIFY your package** and select the correct testing environment from the table above
2. **READ** `quality/testing/testing-patterns.mdc` for AAA pattern and best practices
3. **FOLLOW** the package-specific patterns listed above
4. **CONSULT** `docs/workflow/custom_modes/tester.md` for TDD workflow and package guidance

### Test Efficiency Rules
- **Ratio**: 1:2 test-to-code maximum â†’ See `quality/testing/testing-patterns.mdc`
- **Focus**: User-visible behavior only â†’ See `quality/testing/testing-patterns.mdc`
- **Mock**: External dependencies only â†’ See `quality/testing/testing-setup.mdc`
- **Environment**: Use package-appropriate mocks (DOM for ui, RN components for app, Node for api)
- **Convert**: Complex failing tests to integration tests â†’ See `quality/testing/testing-troubleshooting.mdc`

## ðŸ”— Sub-Rule Navigation

### Core Patterns & Organization
**`quality/testing/testing-patterns.mdc`**
- AAA (Arrange-Act-Assert) pattern (mandatory)
- Test organization and naming conventions
- Data-driven testing patterns
- Test independence and isolation

### React Native Testing (Jest)
**`quality/testing/testing-react-native.mdc`**
- Accessibility-based queries (100% success rate)
- Tamagui component testing patterns
- Event handling with `fireEvent.press()`
- Common React Native anti-patterns to avoid

### Web Testing (Vitest)
**`quality/testing/testing-web.mdc`**
- Component testing with jsdom
- Business logic testing patterns
- Browser API mocking
- Web-specific best practices

### Environment Setup
**`quality/testing/testing-setup.mdc`**
- Jest configuration for React Native
- Vitest configuration for web
- Essential mocks and setup files
- Manual vs automatic mocking strategies

### Troubleshooting & Debugging
**`quality/testing/testing-troubleshooting.mdc`**
- Common error patterns and fixes
- Query strategy problems and solutions
- Mock configuration issues
- Performance and debugging guidelines

### Success Metrics & Validation
**`quality/testing/testing-metrics.mdc`**
- Proven success patterns and metrics
- Validation checklists
- Coverage requirements
- Review and maintenance guidelines

## ðŸš€ Quick Start Checklist
â–¡ **Identify your package** and choose the correct testing environment:
   - packages/ui: Jest + @testing-library/react + jsdom
   - packages/app: Jest + @testing-library/react-native + jsdom
   - packages/api: Vitest + native Node testing
   - apps/expo: Jest + jest-expo + @testing-library/react-native
   - apps/next: Vitest + @testing-library/react
â–¡ Follow AAA pattern with clear comments
â–¡ Use appropriate query patterns for your package (data-testid for ui, getByLabelText for app)
â–¡ Mock external dependencies only (APIs, native modules, libraries)
â–¡ Use package-appropriate mocks (DOM for ui, RN components for app, Node for api)
â–¡ Maintain 1:2 test-to-code ratio
â–¡ Test user behavior, not implementation

## ðŸŽ¯ Success Metrics Summary
â†’ See `quality/testing/testing-metrics.mdc` for comprehensive success metrics and validation

## ðŸ”„ Rule Updates
This rule coordinates focused sub-rules. Update specific patterns in their respective sub-rule files:
- Add new patterns to `testing-patterns.mdc`
- Update React Native issues in `testing-react-native.mdc`
- Add troubleshooting to `testing-troubleshooting.mdc`
- Update metrics in `testing-metrics.mdc`

**Last Coordinated**: September 2025 - Package-specific testing environments implemented
- packages/ui: Web component testing (Jest + jsdom)
- packages/app: React Native app testing (Jest + RN Testing Library)
- packages/api: Node.js API testing (Vitest)
- apps/expo: Full React Native app testing (Jest + jest-expo)
- apps/next: Web app testing (Vitest)

â†’ See `quality/testing/testing-metrics.mdc` for performance and maintenance guidelines
