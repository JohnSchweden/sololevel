---
description: Unified testing strategy coordinator for Jest and Vitest environments
globs: ["**/*.test.*", "**/*.spec.*"]
alwaysApply: true
references: ["quality/testing/testing-patterns", "quality/testing/testing-react-native", "quality/testing/testing-web", "quality/testing/testing-setup", "quality/testing/testing-troubleshooting", "quality/testing/testing-metrics"]
---

# Modern Testing Strategy (Unified Coordinator)

## 🎯 Core Philosophy
**Test user behavior, not implementation. Focus on what users would notice if it broke.**

### Package-Specific Test Runner Selection
- **packages/ui** (Shared UI Components): Jest with jsdom → Web component testing → See `quality/testing/testing-web.mdc`
- **packages/app** (Business Logic & Screens): Jest with jsdom → React Native app testing → See `quality/testing/testing-react-native.mdc`
- **packages/api** (Backend Integration): Vitest → Node.js API testing → See `quality/testing/testing-web.mdc`
- **supabase/shared/** (Cross-platform utilities): Vitest → Node.js testing
- **supabase/functions/_shared** (Domain-specific logic): Vitest → Node.js testing
- **supabase/functions/** (Edge entrypoints): Deno test runner for Edge runtime behavior

### Architectural Boundaries (Import Restrictions)
**CRITICAL**: Maintain clean separation between shared utilities and domain logic:
- ✅ **supabase/functions/** may import from `supabase/shared/`
- ✅ **supabase/functions/_shared/** may import from `supabase/shared/`
- ❌ **supabase/shared/** may NOT import from `supabase/functions/`
- ❌ **supabase/shared/** may NOT import from `supabase/functions/_shared/`

**Enforcement**: Import validation in CI/CD pipeline prevents architectural violations.
- **apps/expo** (React Native App): Jest with jest-expo preset → Full RN app testing → See `quality/testing/testing-react-native.mdc`
- **apps/next** (Web App): Vitest → Web app testing → See `quality/testing/testing-web.mdc`
- **NEVER mix**: Don't use Vitest for React Native or Jest for pure Node.js testing

### Critical Success Patterns
- **packages/ui**: DOM-based queries with `data-testid` → See `quality/testing/testing-web.mdc`
- **packages/app**: Accessibility-based queries with `getByLabelText()` → See `quality/testing/testing-react-native.mdc`
- **packages/api**: Standard Node.js testing patterns → See `quality/testing/testing-web.mdc`

## 📋 Quick Reference

### Before Writing Tests
1. **IDENTIFY your package** and select the correct testing environment from the table above
2. **READ** `quality/testing/testing-patterns.mdc` for AAA pattern and best practices
3. **FOLLOW** the package-specific patterns listed above
4. **CONSULT** `docs/workflow/custom_modes/tester.md` for TDD workflow and package guidance

### Test Efficiency Rules
- **Ratio**: 1:2 test-to-code maximum → See `quality/testing/testing-patterns.mdc`
- **Focus**: User-visible behavior only → See `quality/testing/testing-patterns.mdc`
- **Mock**: External dependencies only → See `quality/testing/testing-setup.mdc`
- **Environment**: Use package-appropriate mocks (DOM for ui, RN components for app, Node for api)
- **Convert**: Complex failing tests to integration tests → See `quality/testing/testing-troubleshooting.mdc`

## 🔗 Sub-Rule Quicklinks

Jump directly to detailed guidance for each testing area:

### 🧩 Core Patterns & Organization
- **[AAA Pattern, Naming, Data-Driven, Isolation](quality/testing/testing-patterns.mdc)**
  - Mandatory Arrange-Act-Assert structure
  - Consistent test naming and organization
  - Data-driven and table-based test strategies
  - Ensuring test independence

### 📱 React Native Testing (Jest)
- **[React Native Patterns & Anti-Patterns](quality/testing/testing-react-native.mdc)**
  - Accessibility-first queries (e.g., `getByLabelText`)
  - Tamagui component testing
  - Event simulation with `fireEvent.press()`
  - Common pitfalls to avoid in RN testing

### 🌐 Web Testing (Vitest)
- **[Web Component & Logic Testing](quality/testing/testing-web.mdc)**
  - jsdom-based component tests
  - Business logic and browser API mocking
  - Web-specific best practices

### ⚙️ Environment Setup
- **[Test Runner & Mock Configuration](quality/testing/testing-setup.mdc)**
  - Jest setup for React Native
  - Vitest setup for web/Node
  - Required mocks and setup files
  - Manual vs. automatic mocking

### 🛠️ Troubleshooting & Debugging
- **[Common Issues & Solutions](quality/testing/testing-troubleshooting.mdc)**
  - Frequent error patterns and fixes
  - Query and mock troubleshooting
  - Performance and debugging tips

### 📊 Success Metrics & Validation
- **[Metrics, Coverage, Review](quality/testing/testing-metrics.mdc)**
  - Key success patterns and validation checklists
  - Coverage requirements
  - Ongoing review and maintenance guidelines

## 🚀 Quick Start Checklist
□ **Identify your package** and choose the correct testing environment:
   - packages/ui: Jest + @testing-library/react + jsdom
   - packages/app: Jest + @testing-library/react-native + jsdom
   - packages/api: Vitest + native Node testing
   - apps/expo: Jest + jest-expo + @testing-library/react-native
   - apps/next: Vitest + @testing-library/react
   - supabase/shared: Vitest (Node)
   - supabase/functions/_shared: Vitest (Node)
   - supabase/functions (Edge): Deno test runner
□ Follow AAA pattern with clear comments
□ Use appropriate query patterns for your package (data-testid for ui, getByLabelText for app)
□ Mock external dependencies only (APIs, native modules, libraries)
□ Use package-appropriate mocks (DOM for ui, RN components for app, Node for api)
□ Maintain 1:2 test-to-code ratio
□ Test user behavior, not implementation

## 🎯 Success Metrics Summary
→ See `quality/testing/testing-metrics.mdc` for comprehensive success metrics and validation

## 🔄 Rule Updates
This rule coordinates focused sub-rules. Update specific patterns in their respective sub-rule files:
- Add new patterns to `testing-patterns.mdc`
- Update React Native issues in `testing-react-native.mdc`
- Add troubleshooting to `testing-troubleshooting.mdc`
- Update metrics in `testing-metrics.mdc`

**Last Coordinated**: September 2025 - Package-specific testing environments implemented
- packages/ui: Web component testing (Jest + jsdom)
- packages/app: React Native app testing (Jest + RN Testing Library)
- packages/api: Node.js API testing (Vitest)
- apps/expo: Full React Native app testing (Jest + jest-expo)
- apps/next: Web app testing (Vitest)

→ See `quality/testing/testing-metrics.mdc` for performance and maintenance guidelines
