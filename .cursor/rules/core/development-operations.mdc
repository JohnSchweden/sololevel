---
description: Development operations & package management
alwaysApply: true
globs:
  - "**/package.json"
  - "yarn.lock"
  - "turbo.json"
  - ".github/workflows/**"
  - "biome*.json"
  - "tsconfig*.json"
  - "scripts/**"
  - "apps/**/app.json"
  - "apps/**/metro.config.js"
  - "apps/**/babel.config.js"
  - "apps/**/next.config.js"
  - "apps/**/next-i18next.config.js"
  - "apps/**/eas.json"
  - "supabase/**"
---

## Purpose
Operational standards for daily development: command usage, Yarn 4 workspace management, dependency handling, testing, and CI requirements. 

**Related:** `quality/testing-unified.mdc`, `quality/error-handling.mdc`, `quality/performance.mdc`, `core/typescript-standards.mdc`

## TL;DR — Do This First
- **Yarn 4 only** via `corepack enable`. Never use npm/pnpm/npx
- Install: `yarn install --immutable` | Start: `yarn dev`
- Run apps: `yarn native` (Expo), `yarn web` (Next)
- Kill processes: `pkill -f "yarn native"` or `pkill -f "yarn web"`
- Workspace ops: `yarn workspace <name> run <script>`
- Supabase CLI: `yarn supabase <command>` (never direct `supabase`)

## Yarn 4 Workspace Management
- Always use Yarn (v4+). Never use npm/pnpm/npx
- Workspace protocol for internal deps: `"@my/ui": "workspace:*"`
- Recommended config: `nodeLinker: node-modules`, `enableGlobalCache: true`
- Troubleshooting: `yarn cache clean`, `yarn dlx @yarnpkg/doctor`, `yarn explain peer-requirements`

### Yarn Enforcement
- **packageManager field**: Enforces Yarn 4.9.3 via `package.json`
- **Pre-commit hooks**: Prevent commits with `package-lock.json` or npm `node_modules`
- **CI validation**: All workflows use `yarn install --immutable`
- **Local development**: Use `corepack enable` to ensure correct Yarn version

## Dependency Strategy

### Categories
- Core: React, React Native, Expo, Expo Router, TypeScript
- UI: Tamagui, Expo Router, Lucide React
- Backend: Supabase client/CLI
- State: Zustand, TanStack Query, React Hook Form
- Logging: Custom cross-platform structured logger (@my/logging)
- Dev/Test: Turbo, Vitest, Biome, Playwright, React Testing Library

### Version Management
- Pin exact versions for critical deps; carets only for utilities
- Align Expo SDK across apps/packages
- Batch updates; document breaking changes in `CHANGELOG.md`

### Peer Dependencies & Resolutions
Fix peer dependency conflicts using `resolutions` and `packageExtensions` in root `package.json`. Do not hide Yarn warnings (YN0060, YN0086, YN0069) with `logFilters`.

### Dependency Validation Checklist
- [ ] React Native compatible (check react-native-directory)
- [ ] Expo managed workflow compatible
- [ ] TypeScript support or @types available
- [ ] Bundle size impact acceptable
- [ ] No conflicting peer dependencies
- [ ] No high/critical security vulnerabilities
- [ ] License compatible with project

### Workspace Focus & Diagnostics
- `yarn workspaces focus <workspace>`: speeds up installs by focusing deps for one workspace; do not use on CI; run full `yarn install` before commit
- `yarn why <package>`: detect duplicate/hoisted versions
- `yarn explain peer-requirements <hash>`: resolve peer dependency issues
- `yarn install --mode update-lockfile`: only in upgrade/renovation PRs; never in feature PRs

### Lockfile Policy (CI)
- Use `yarn install --immutable` for reproducible CI installs
- Allow `--mode update-lockfile` only in dependency update branches
- Feature PRs must not modify `yarn.lock` unless intentionally fixing dependency health

## Quality Gates

### Pre-Commit (Local - Husky enforced)
- TypeScript: `yarn type-check` → 0 errors
- Linting: `yarn lint` → 0 errors
- Package Manager: No `package-lock.json` present

### CI (Automated)
- Install: `yarn install --immutable` → no lockfile changes
- TypeScript: `yarn type-check:all` → 0 errors
- Linting: `yarn lint:all` → 0 errors
- Tests: `yarn test:all` → all tests pass
- Build: `yarn build` → success
- Security: `yarn security:audit:ci` → no high/critical vulnerabilities

### Testing Policy
- Test-to-code ratio ≤ 1:2
- Tests target user behavior, not implementation
- Only critical user flows are tested
- Minimal mocking (external deps only)
- Avoid testing internal hook calls or state transitions

### Tools
- **Linting/Formatting:** Lint and Format (Biome)
- **Type Checking:** TypeScript strict mode
- **Security:** `yarn npm audit`

## Workspace Commands Reference

| Task | Command | Scope |
|------|---------|-------|
| **Package Management** | | |
| Add to UI package | `yarn workspace @my/ui add <package>` | @my/ui |
| Add to app logic | `yarn workspace @my/app add <package>` | @my/app |
| Add to API clients | `yarn workspace @my/api add <package>` | @my/api |
| Add to config | `yarn workspace @my/config add <package>` | @my/config |
| Add to logging | `yarn workspace @my/logging add <package>` | @my/logging |
| Add to Expo app | `yarn workspace expo-app add <package>` | expo-app |
| Add to Web app | `yarn workspace web-app add <package>` | web-app |
| **General Operations** | | |
| Run workspace script | `yarn workspace <name> run <script>` | Specific workspace |
| List all workspaces | `yarn workspaces list` | Root |
| **Build & Test Filters** | | |
| Build native only | `yarn build --filter=expo-app` | expo-app |
| Build web only | `yarn build --filter=web-app` | web-app |
| Test without native | `yarn test --exclude expo-app` | All except expo-app |

## Supabase Local Development

### When to Use Edge Functions vs Client
- **Edge Functions:** privileged logic, secrets, admin policies, multi-step transactions
- **Direct Client:** simple CRUD with RLS, read public data

### Commands
- Start local stack: `yarn supabase start`
- Serve Edge Functions: `yarn supabase functions serve`
- Check DB logs: `yarn supabase db logs`
- **Never** run `supabase` directly; always prefix with `yarn`

## Troubleshooting & Health Checks
- Reinstall: remove `node_modules` and `yarn.lock`, then `yarn install`
- Integrity: `yarn workspaces foreach run build --check-cache`
- Dedupe: `yarn dedupe`

## Knowledge Boundaries
- Use repository rules/docs and workspace scripts; do not invent external commands
- Package management is Yarn 4 only. Supabase commands must be run via `yarn supabase`
- Prefer workspace-scoped scripts over ad-hoc commands; follow path aliases and monorepo structure

## Cross-Links
- Architecture & structure → `core/monorepo-foundation.mdc`
- Error handling patterns → `quality/error-handling.mdc`
- Performance optimization → `quality/performance.mdc`
- TypeScript rules → `core/typescript-standards.mdc`

## Security & Maintenance
- Use Renovate/Dependabot for regular dependency updates
- Security auditing handled in Quality Gates section