---
description: Overall architecture decisions and patterns
globs: ["**/*"]
alwaysApply: true
---

# Architecture Decisions

## Tech Stack
- Frontend: React Native (Expo) + Next.js
- UI: Tamagui (cross-platform)
- Backend: Supabase (PostgreSQL + Edge Functions)
- State: Zustand (client) + TanStack Query (server)
- Navigation: Expo Router (file-based routing)
- Language: TypeScript only

## Data Flow
1. Client → TanStack Query → Supabase Client → PostgreSQL
2. Realtime: PostgreSQL → Supabase Realtime → Client subscription
3. Files: Client → Supabase Storage → CDN

## Security Model
- Row Level Security (RLS) for all data access
- JWT authentication via Supabase Auth
- Edge Functions for sensitive operations
- Environment variables for secrets

## Performance Strategies
- React.memo for expensive components
- Virtual lists for large datasets
- Image optimization with optimized images
- Code splitting with dynamic imports
- Edge caching for static content

## Development Workflow
1. Local Supabase for development
2. Preview branches for testing
3. Production deployment via CI/CD
4. Database migrations versioned in Git