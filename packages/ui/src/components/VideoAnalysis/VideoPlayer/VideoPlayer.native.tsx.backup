import { useEffect, useRef, useState } from 'react'
import Video from 'react-native-video'
import { YStack } from 'tamagui'
import type { VideoPlayerProps } from '../types'

// import { AudioFeedback } from '../AudioFeedback/AudioFeedback'
// import { FeedbackBubbles } from '../FeedbackBubbles/FeedbackBubbles'
// // Import overlay components
// import { MotionCaptureOverlay } from '../MotionCaptureOverlay/MotionCaptureOverlay'
// import { VideoControls } from '../VideoControls/VideoControls'

export function VideoPlayerNative({
  videoUri,
  isPlaying,
  currentTime,
  // duration,
  showControls,
  // onPlay,
  onPause,
  // onSeek,
  // poseData,
  // feedbackMessages,
  // audioUrl,
  // isAudioPlaying,
  // onAudioPlayPause,
  // onAudioSeek,
  // onAudioClose,
  onAudioTimeUpdate,
  // onAudioRewind,
  // onAudioFastForward,
  // onFeedbackBubbleTap,
}: VideoPlayerProps) {
  const videoRef = useRef<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Handle video loading
  const handleLoad = (_data: any) => {
    setIsLoading(false)
    setError(null)
    // Duration is handled by parent component
  }

  // Handle video errors
  const handleError = (error: any) => {
    setIsLoading(false)
    setError(error?.error?.localizedDescription || 'Video failed to load')
  }

  // Handle time updates
  const handleProgress = (data: any) => {
    // Progress updates are handled by parent component
    if (data && data.currentTime && onAudioTimeUpdate) {
      onAudioTimeUpdate(data.currentTime)
    }
  }

  // Handle video end
  const handleEnd = () => {
    onPause?.()
  }

  // Seek to specific time when currentTime changes
  useEffect(() => {
    if (videoRef.current && currentTime >= 0) {
      videoRef.current.seek(currentTime)
    }
  }, [currentTime])

  return (
    <YStack
      flex={1}
      position="relative"
      testID="video-player-native"
    >
      {/* Loading State */}
      {isLoading && (
        <YStack
          flex={1}
          backgroundColor="$color2"
          justifyContent="center"
          alignItems="center"
          testID="video-loading"
        >
          {/* Simple loading indicator */}
          <YStack
            width={40}
            height={40}
            borderRadius={20}
            borderWidth={3}
            borderColor="$color4"
            borderTopColor="$color8"
            testID="loading-spinner"
          />
        </YStack>
      )}

      {/* Error State */}
      {error && (
        <YStack
          flex={1}
          backgroundColor="$color2"
          justifyContent="center"
          alignItems="center"
          padding="$4"
          testID="video-error"
        >
          <YStack
            backgroundColor="$color3"
            padding="$4"
            borderRadius="$4"
            maxWidth={300}
            alignItems="center"
            testID="error-message"
          >
            {/* Error icon placeholder */}
            <YStack
              width={48}
              height={48}
              backgroundColor="$color4"
              borderRadius={24}
              marginBottom="$2"
              testID="error-icon"
            />
            {/* User-safe error message */}
            <YStack testID="error-text">Unable to load video</YStack>
          </YStack>
        </YStack>
      )}

      {/* Native Video Player */}
      {!error && (
        <Video
          ref={videoRef}
          source={{ uri: videoUri }}
          style={{ flex: 1 }}
          paused={!isPlaying}
          onLoad={handleLoad}
          onError={handleError}
          onProgress={handleProgress}
          onEnd={handleEnd}
          resizeMode="contain"
          controls={showControls}
          playInBackground={false}
          playWhenInactive={false}
          ignoreSilentSwitch="ignore"
          testID="native-video-element"
        />
      )}

      {/* Overlays positioned over the video
      <MotionCaptureOverlay
        poseData={poseData}
        isVisible={!isLoading && !error}
      />

      <FeedbackBubbles
        messages={feedbackMessages}
        onBubbleTap={onFeedbackBubbleTap}
      />

      <AudioFeedback
        audioUrl={audioUrl}
        isPlaying={isAudioPlaying || false}
        currentTime={0} // Will be updated from store
        duration={0} // Will be updated from store
        onPlayPause={onAudioPlayPause}
        onSeek={onAudioSeek}
        onClose={onAudioClose}
        onTimeUpdate={onAudioTimeUpdate}
        onRewind={onAudioRewind}
        onFastForward={onAudioFastForward}
        isVisible={!!audioUrl}
        autoHideDelay={3000}
        showProgressBar={true}
      /> */}

      {/* <VideoControls
        isPlaying={isPlaying}
        currentTime={currentTime}
        duration={duration}
        showControls={showControls}
        onPlay={onPlay}
        onPause={onPause}
        onSeek={onSeek}
        title="Video Analysis"
      /> */}
    </YStack>
  )
}
